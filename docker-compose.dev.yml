version: '3.8'

services:
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: abc-company-server
    image: jiseong98/abc-backend:1.0.
    ports:
      - "3000:3000"
    env_file:
      - .env.dev  # .env.dev의 환경변수를 도커 컨테이너로 주입
    depends_on:
      - mongo
      - redis
    restart: no

  mongo:
    image: mongo:6
    container_name: mongo-db
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: test             # 루트 사용자 이름 (MongoDB 최초 실행 시 생성)
      MONGO_INITDB_ROOT_PASSWORD: test1234         # 루트 사용자 비밀번호
      MONGO_INITDB_DATABASE: abc-company           # 초기 생성할 데이터베이스 이름
    volumes:
      - ./volume/mongo_data:/data/db
    restart: always

  mysql:
    image: mysql:8.0
    container_name: mysql-db
    ports:
      - "3307:3306"
    environment:
      MYSQL_ROOT_PASSWORD: test1234
      MYSQL_DATABASE: abc-company-mysql
      MYSQL_USER: test
      MYSQL_PASSWORD: test1234
    volumes:
      - ./volume/mysql_data:/var/lib/mysql

  redis:
    image: redis:7      # Redis 공식 이미지 사용
    container_name: redis-server
    ports:
      - "6379:6379"   # 호스트 포트: 컨테이너 포트 매핑 (Redis 기본 포트)
    volumes:
      - ./volume/redis_data:/data      # Redis 데이터 파일을 로컬 볼륨에 저장 (데이터 유지)
    restart: always

volumes:
  mongo_data:
  redis_data:   # 위에서 지정한 redis-data 볼륨 이름. 실제로는 Docker가 내부적으로 저장 위치를 관리함