# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: Node.js CI

on:
  # develop 브랜치에 push, pull 이벤트 발생 시 jobs 실행
  push:
    branches: [ "develop" ]
    # Update 시 test를 실행시킬 항목들
    paths:
      - '**/*.ts'
      - 'src/**'
      - 'test/**'
  pull_request:
    branches: [ "develop" ]
    # Update 시 test를 실행시킬 항목들
    paths:
      - '**/*.ts'
      - 'src/**'
      - 'test/**'

jobs:
  # build 라는 작업 정의
  build:
    # build 작업을 실행할 가상 머신 환경 지정
    runs-on: ubuntu-latest
    services:
      mongo:
        image: mongo
        env:
          MONGO_INITDB_ROOT_USERNAME: test
          MONGO_INITDB_ROOT_PASSWORD: test1234
          MONGO_INITDB_DATABASE: abc-company
        ports:
          - 27018:27017

      mysql:
        image: mysql
        env:
          MYSQL_ROOT_PASSWORD: test1234
          MYSQL_DATABASE: abc-company-mysql
          MYSQL_USER: test
          MYSQL_PASSWORD: test1234
        ports:
          - 3306:3306

    # 버전 매트릭스 전력
    strategy:
      matrix:
        # Node.js 23.x 버전 테스트 (여러 버전 넣을 시 각 버전으로 테스트)
        node-version: [ 23.x ]

    # 실행할 단계들, 각 단계는 순서대로 실행
    steps:
    - uses: actions/checkout@v4    # 현재 저장소의 코드를 가져오기 (Actions가 내 코드를 사용할 수 있도록 하는 필수 단계)
    # actions/setup-node 라는 공식 액션을 사용해서, 18 ~ 22 버전 중 현재 버전으로 Node 설정

    #  환경변수 주입
    - name: Create .env.production
      run: |
        echo "PORT=3001" >> .env.test
        echo "HOST=127.0.0.1" >> .env.test
        echo "ACCESS_SECRET=${{ secrets.ACCESS_SECRET }}" >> .env.test
        echo "REFRESH_SECRET=${{ secrets.REFRESH_SECRET }}" >> .env.test
        echo "SERVER_URI=http://127.0.0.1:3001" >> .env.test
        
        echo "MONGO_URI=${{ secrets.MONGO_URI }}" >> .env.test
        echo "MONGO_ROOT_USER=test" >> .env.test
        echo "MONGO_ROOT_PASSWORD=test1234" >> .env.test
        echo "MONGO_DATABASE=abc-company" >> .env.test
        echo "MONGO_URI_PORT=127.0.0.1:27018" >> .env.test
        
        echo "MYSQL_URI_PORT=3306" >> .env.test
        echo "MYSQL_USER=test" >> .env.test
        echo "MYSQL_PASSWORD=test1234" >> .env.test
        echo "MYSQL_DATABASE=abc-company-mysql" >> .env.test
        
        echo "REDIS_URI=redis://127.0.0.1:6379" >> .env.test
        echo "AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}" >> .env.test
        echo "AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> .env.test
        echo "AWS_BUCKET_NAME=${{ secrets.AWS_BUCKET_NAME }}" >> .env.test
        echo "AWS_REGION=${{ secrets.AWS_REGION }}" >> .env.test
        

    # redis 서버 실행
    - name: Start Redis
      uses: supercharge/redis-github-action@1.1.0
      with:
        redis-version: 6

    - name: Use Node.js ${{ matrix.node-version }}   
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'    # npm 의존성 캐싱 활성화 -> 빌드 속도 향상
    - run: npm ci                        # package-lock.json 기반으로 의존성 설치
    - run: npm run build --if-present    # build 스크립트가 존재 시 실행
    - run: npm test                      # 작성해둔 테스트 코드 실행
